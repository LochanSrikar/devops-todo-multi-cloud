# Todo Microservice (Python with Flask)

This is the Todo microservice for task management in the Todo app. It handles CRUD (Create, Read, Update, Delete) operations on tasks, integrates with User for auth, and Notification for alerts. Built with Flask and SQLite for local testing.

## Setup
- Make sure you have Python 3.11 and pip installed locally for development.
- The service runs on port 3000.
- Test endpoint: http://localhost:3000/todos (GET for list, POST for add with body like {"task": "Test", "token": "test"}).

## Docker Commands to Run the Container

These commands containerize and run the Todo service. Run them in the `services/todo-python` folder.

| Order | Command | Description | Why Needed | Example Usage |
|-------|---------|-------------|------------|--------------|
| 1 | `docker build -t todo-service .` | Builds the container image from the Dockerfile. | Creates the "box" with your Python app and dependencies—first step to containerize. Significance: Makes the app portable; run it anywhere with Docker. | Run in `services/todo-python` folder. |
| 2 | `docker run -d -p 3000:3000 todo-service` | Runs the container in background, mapping port 3000 inside to outside. | "Opens" the box to start the app and access it (e.g., via browser). Significance: Tests if the container works like local; -d keeps terminal free. | Run after build; stop with `docker stop <ID>`. |
| 3 | `docker ps` | Lists running containers. | Checks what's active. Significance: Debug if your app is up. | Run anytime. |
| 4 | `docker ps -a` | Lists all containers (running or stopped). | Sees stopped ones too. Significance: Find old containers for logs. | Use if `docker ps` is empty. |
| 5 | `docker logs <CONTAINER ID>` | Shows logs from a container (get ID from `docker ps -a`). | "Peeks inside" for errors. Significance: Debugging tool. | e.g., `docker logs f7ff46002269`. |
| 6 | `docker stop <CONTAINER ID>` | Stops a running container. | "Puts the toy away"—frees resources. Significance: Clean up to avoid conflicts. | e.g., `docker stop f7ff46002269`. |
| 7 | `docker images` | Lists built images. | Sees your "blueprints." Significance: Verify builds. | Run after build.

## How to Run Locally (Without Docker)
- Activate venv: `venv\Scripts\activate`.
- `pip install -r requirements.txt` (install libs).
- `python app.py` (start on port 3000).
- Test: Use PowerShell for POST/GET as in the project guide.

## Notes
- The Dockerfile uses a slim Python image for a small size.
- Integrate with User (port 8080) and Notification (port 5098)—run them too for full flow.
- For frontend: Open `frontend/index.html` in browser to interact with the app.