# User Microservice (Java with Spring Boot)

This is the User microservice for authentication in the Todo app. It verifies tokens and returns user details (e.g., user_id) for the Todo service to use. Built with Spring Boot and H2 DB for local testing.

## Setup
- Make sure you have Java 21 and Maven installed locally for building.
- The service runs on port 8080.
- Test endpoint: http://localhost:8080/api/users/verify?token=test (returns user JSON if found).

## Docker Commands to Run the Container

These commands containerize and run the User service. Run them in the `services/user-java` folder.

| Order | Command | Description | Why Needed | Example Usage |
|-------|---------|-------------|------------|--------------|
| 1 | `docker build -t user-service .` | Builds the container image from the Dockerfile. | Creates the "box" with your Java app and dependencies—first step to containerize. Significance: Makes the app portable; run it anywhere with Docker. | Run in `services/user-java` folder. |
| 2 | `docker run -d -p 8080:8080 user-service` | Runs the container in background, mapping port 8080 inside to outside. | "Opens" the box to start the app and access it (e.g., via browser). Significance: Tests if the container works like local; -d keeps terminal free. | Run after build; stop with `docker stop <ID>`. |
| 3 | `docker ps` | Lists running containers. | Checks what's active. Significance: Debug if your app is up. | Run anytime. |
| 4 | `docker ps -a` | Lists all containers (running or stopped). | Sees stopped ones too. Significance: Find old containers for logs. | Use if `docker ps` is empty. |
| 5 | `docker logs <CONTAINER ID>` | Shows logs from a container (get ID from `docker ps -a`). | "Peeks inside" for errors. Significance: Debugging tool. | e.g., `docker logs f7ff46002269`. |
| 6 | `docker stop <CONTAINER ID>` | Stops a running container. | "Puts the toy away"—frees resources. Significance: Clean up to avoid conflicts. | e.g., `docker stop f7ff46002269`. |
| 7 | `docker images` | Lists built images. | Sees your "blueprints." Significance: Verify builds. | Run after build.

## How to Run Locally (Without Docker)
- `mvn clean install` (build).
- `mvn spring-boot:run` (start on port 8080).
- Test: http://localhost:8080/api/users/verify?token=test.

## Notes
- The Dockerfile uses multi-stage build for a small image.
- Integrate with Todo: Run this service, then Todo calls it for auth.

----------------------------------------------------------------------------------------------------------------------------------------

## How We Created ECR, Tagged, and Pushed the Docker Image

ECR (AWS Elastic Container Registry) is a secure "warehouse" for storing Docker images in the cloud. We created a repo for the User service, tagged the local image, and pushed it. This makes the image shareable and deployable in AWS (e.g., EKS in Level 5). Why this? Local images are on your PC—pushing to ECR is like uploading photos to cloud storage for backup and sharing. Significance: Enables multi-cloud (AWS + Azure) and automated deploys (Level 3 CI/CD)—saves time, ensures consistency.

### Step-by-Step Process
1. **Create ECR Repository (The Warehouse Shelf)**:
   - Command: `aws ecr create-repository --repository-name user-service --region us-east-1`
   - Why Needed: ECR needs a "shelf" (repo) for your image—can't store without it.
   - Significance: Private for security (DevSecOps Level 7)—protects code. Defaults are free-tier safe. Verification: Copy "repositoryUri" from output (e.g., 288761730775.dkr.ecr.us-east-1.amazonaws.com/user-service).

2. **Tag the Image (Label the Box for Shipping)**:
   - Command: `docker tag user-service:latest <repositoryUri>:latest` (replace <repositoryUri> with your URI).
   - Why Needed: Tags "addresses" the image for the repo—Docker needs this to know where to send.
   - Significance: Allows versioning (:latest, :v1)—tracks updates like Git tags (Level 2).

3. **Login to ECR (Get the Key to the Warehouse)**:
   - Command: `aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <account>.dkr.ecr.us-east-1.amazonaws.com`
   - Why Needed: ECR requires "login" to push—like a key for the door.
   - Significance: Secure access—token expires soon (Level 7 safety).

4. **Push the Image (Ship the Box)**:
   - Command: `docker push <repositoryUri>:latest`
   - Why Needed: Uploads the tagged image to ECR.
   - Significance: Image is now cloud-stored—pull from anywhere (e.g., EKS in Level 5).

5. **Verification (Check the Warehouse)**:
   - Console: AWS > ECR > Repositories > user-service > Images—see "latest".
   - Why Needed: Confirms no issues during push.
   - Significance: Debugging habit—catch problems early (Level 6 monitoring).